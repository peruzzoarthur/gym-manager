generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                        String              @id @default(uuid())
  firstName                 String?
  lastName                  String?
  email                     String              @unique
  password                  String
  dob                       DateTime?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  role                      Role                @default(USER)
  hashedRt                  String?
  profileImage              String?
  trainings                 Training[]          @relation("UserTrainings")
  activeTrainingId          String?
  trainingsCreated          Training[]          @relation("TrainingCreator")
  exerciseReferencesCreated ExerciseReference[] @relation("ExerciseReferenceCreator")
}

model Training {
  id              String          @id @default(uuid())
  name            String?
  trainingGroups  TrainingGroup[]
  user            User            @relation("UserTrainings", fields: [userId], references: [id])
  userId          String
  // activatedAtUser User?           @relation("ActiveTraining")
  tempo           Tempo
  daysInWeek      Int
  done            Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  reps            Int
  sets            Int
  rest            Int
  objective       String?
  createdBy       User            @relation("TrainingCreator", fields: [createdByUserId], references: [id])
  createdByUserId String
}

model TrainingGroup {
  id                String             @id @default(uuid())
  key               String
  exercises         Exercise[]
  combinedExercises CombinedExercise[]
  done              Boolean            @default(false)
  doneAt            DateTime?
  groups            Group[]
  training          Training           @relation(fields: [trainingId], references: [id])
  trainingId        String
  phase             Phase
  number            Int
  active            Boolean            @default(false)
  activeAt          DateTime?

  @@unique([key, trainingId, phase, number])
}

enum Phase {
  CIS
  ONE
  TWO
  UNCATEGORIZED
}

model Exercise {
  id                String             @id @default(uuid())
  ref               ExerciseReference  @relation(fields: [refId], references: [id])
  refId             String
  load              Float?
  reps              Int?
  sets              Int?
  trainingGroups    TrainingGroup[]
  index             Int?
  combinedExercises CombinedExercise[]
}

model CombinedExercise {
  id             String          @id @default(uuid())
  exercises      Exercise[]
  index          Int?
  trainingGroups TrainingGroup[]
}

model ExerciseReference {
  id              String     @id @default(uuid())
  name            String     @unique()
  exercises       Exercise[]
  groups          Group[]
  createdBy       User       @relation("ExerciseReferenceCreator", fields: [createdByUserId], references: [id])
  createdByUserId String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum Tempo {
  ONE2ONE
  ONE2TWO
  ONE2THREE
  ONE2FOUR
}

enum Group {
  CHEST
  BACK
  TRICEPS
  BICEPS
  LEGS
  CALVES
  COMPLEX
  SHOULDERS
}
